#!/usr/bin/env perl
################################################################################
#
# influxdb-schema-updater
#
# Script to update InfluxDB databases, retention policies and continuous queries
# according to the config files. Exits with 0 if and only if every required
# update has been executed successfully.
#
# Written by Anselme Goetschmann ang@open.ch April 2018
# Copyright (c) 2018 Open Systems AG, Switzerland
# All Rights Reserved.
#
################################################################################

use 5.010;
use strict;
use warnings;

use InfluxDB::HTTP;
use Getopt::Long;
use Pod::Usage qw(pod2usage);
use IPC::Run qw(run);
use JSON::MaybeXS;
use File::Slurper qw(read_text);

sub main {
    my $show_usage;
    my $dryrun = 0;
    my $diff = 0;
    my $force = 0;
    my $schema_dir = '/etc/influxdb/schema/';
    my $url = 'http://localhost:8086';

    GetOptions(
        ("help"     => \$show_usage,
         "dryrun"   => \$dryrun,
         "diff"     => \$diff,
         "force"    => \$force,
         "config=s" => \$schema_dir,
         "url=s"    => \$url)
    );

    if ($show_usage) {
        pod2usage(-verbose => 1)
    }

    # schema configuration directory
    if (! -d $schema_dir) {
        pod2usage("The InfluxDB schema configuration directory $schema_dir does not exist");
    }
    $schema_dir =~ s/\/$//;

    # influxdb client
    $url =~ /^(?:(?<protocol>\w+):\/\/)?(?<host>\w+):(?<port>\d+)$/;
    if ($+{protocol} && $+{protocol} ne 'http') {
        pod2usage("Got $+{protocol} as protocol to reach InfluxDB, but only http is supported.");
    }
    if (!$+{host} || !$+{port}) {
        pod2usage("The host and the port could not be extracted from the url $url");
    }
    my $influxdb_client = InfluxDB::HTTP->new(host => $+{host}, port => $+{port});
    my $ping = $influxdb_client->ping();
    die "Failed to reach InfluxDB at $url: $ping\n" if !$ping;

    # get the schema updates from the configuration directory compared to what is in influxdb
    my $updates = extract_updates($influxdb_client, $schema_dir, $dryrun, $force);
    # only print the updates if we're in diff mode
    if ($diff) {
        print_diff($updates);
        exit 0;
    }

    # apply the updates
    my $unapplied_updates_count = apply_updates($updates, $influxdb_client);
    exit ($unapplied_updates_count == 0 ? 0 : 1);
}

sub extract_updates {
    my ($influxdb_client, $schema_dir, $dryrun, $force) = @_;

    my $db_schemas_in_influxdb = load_db_schemas_in_influxdb($influxdb_client);
    my $db_schemas_in_config = load_db_schemas_in_config($schema_dir);
    my $updates = extract_database_updates($db_schemas_in_influxdb, $db_schemas_in_config, $dryrun, $force);

    my $all_cqs_in_influxdb = load_all_cqs_in_influxdb($influxdb_client);
    my $all_cqs_in_config = load_all_cqs_in_config($schema_dir);
    my ($cq_deletions, $cq_updates_and_creations) = extract_continuous_query_updates($all_cqs_in_influxdb, $all_cqs_in_config, $dryrun, $force);
    $updates = [@$cq_deletions, @$updates, @$cq_updates_and_creations]; # delete old stuff first

    return $updates;
}

sub apply_updates {

    my ($updates, $influxdb_client) = @_;

    my %object_str = (db => 'database', rp => 'retention policy', cq => 'continuous query');
    my %action_prefix = (delete => '[-]', update => '[~]', create => '[+]');

    my $skipped_count = 0;
    for my $update (@$updates) {
        my $description = "$update->{action} $object_str{$update->{object}} $update->{name}" . ($update->{object} ne 'db' ? " on database $update->{db}" : '');
        if ($update->{skip}) {
            say "[!] skipped: $description";
            $skipped_count += 1;
            next;
        }
        say "$action_prefix{$update->{action}} $description";
        query_influxql($influxdb_client, $update->{query});
    }

    return $skipped_count;
}

sub print_diff {
    my ($updates) = @_;

    for my $update (@$updates) {
        print '-- ' if $update->{skip};
        say $update->{query};
    }
}

# Databases and Retention Policies ---------------------------------------------

# returns an array of updates:
# [
#     {
#         action => 'delete' | 'update' | 'create',
#         object => 'db' | 'rp' | 'cq',
#         db => <db_name>,
#         name => <data_name>,
#         query => <ifql_query>,
#         skip => 0 | 1, # whether this change should be skipped
#     },
#     ...
# ]
sub extract_database_updates {

    my ($db_schemas_in_influxdb, $db_schemas_in_config, $dryrun, $force) = @_;

    my ($old_dbs, $eq_dbs, $new_dbs) = get_Ldifference_intersection_Rdifference([keys %{$db_schemas_in_influxdb}], [keys %{$db_schemas_in_config}]);

    my %rp_updates;
    my @eq_and_new;
    push(@eq_and_new, @$eq_dbs, @$new_dbs);
    for my $db (@eq_and_new) {
        my ($old, $updated, $new) = extract_retention_policy_updates($db, $db_schemas_in_influxdb->{$db}, $db_schemas_in_config->{$db}->{rps}, $dryrun, $force);
        $rp_updates{old_rps}->{$db} = $old;
        $rp_updates{updated_rps}->{$db} = $updated;
        $rp_updates{new_rps}->{$db} = $new;
    }

    # array of updates in the order in which they should be applied
    my @updates;
    # old retention policies
    for my $db (reverse sort keys %{$rp_updates{old_rps}}) {
        push @updates, @{$rp_updates{old_rps}->{$db}};
    }
    # old databases
    # will not delete them by default (skip => 1) or if dryrun=1. Will delete them if dryrun=0 and force=1
    for my $db (reverse sort @$old_dbs){
        push @updates, {
            action => 'delete',
            object => 'db',
            db => $db,
            name => $db,
            query => "DROP DATABASE $db;",
            skip => $dryrun || !$force,
        };
    }
    # new databases
    for my $db (sort @$new_dbs){
        push @updates, {
            action => 'create',
            object => 'db',
            db => $db,
            name => $db,
            query => $db_schemas_in_config->{$db}->{create_query},
            skip => $dryrun,
        };
    }
    # new retention policies
    for my $db (sort keys %{$rp_updates{new_rps}}) {
        push @updates, @{$rp_updates{new_rps}->{$db}};
    }
    # updated retention policies
    for my $db (sort keys %{$rp_updates{updated_rps}}) {
        push @updates, @{$rp_updates{updated_rps}->{$db}};
    }

    return \@updates;
}

sub extract_retention_policy_updates {
    my ($db, $rps_in_influxdb, $rps_in_config, $dryrun, $force) = @_;

    my ($old_rps, $eq_rps, $new_rps) = get_Ldifference_intersection_Rdifference([keys %{$rps_in_influxdb}], [keys %{$rps_in_config}]);

    my @old_rps;
    for my $rp (reverse sort @$old_rps) {
        push @old_rps, {
            action => 'delete',
            object => 'rp',
            db => $db,
            name => $rp,
            query => "DROP RETENTION POLICY \"$rp\" ON $db;",
            skip => $dryrun || !$force,
        };
    }
    my @updated_rps;
    for my $rp (sort @$eq_rps) {
        if (compare_rps($rps_in_influxdb->{$rp}, $rps_in_config->{$rp}) != 0) {
            push @updated_rps, {
                action => 'update',
                object => 'rp',
                db => $db,
                name => $rp,
                query => "ALTER RETENTION POLICY \"$rp\" ON $db DURATION $rps_in_config->{$rp}->{duration} REPLICATION 1 SHARD DURATION $rps_in_config->{$rp}->{shard_duration}" . ($rps_in_config->{$rp}->{default} ? ' DEFAULT;' : ';'),
                skip => $dryrun,
            };
        }
    }
    my @new_rps;
    for my $rp (sort @$new_rps) {
        push @new_rps, {
            action => 'create',
            object => 'rp',
            db => $db,
            name => $rp,
            query => "CREATE RETENTION POLICY \"$rp\" ON $db DURATION $rps_in_config->{$rp}->{duration} REPLICATION 1 SHARD DURATION $rps_in_config->{$rp}->{shard_duration}" . ($rps_in_config->{$rp}->{default} ? ' DEFAULT;' : ';'),
            skip => $dryrun,
        };
    }

    return (\@old_rps, \@updated_rps, \@new_rps);
}

sub compare_rps {
    my ($rp1, $rp2) = @_;

    return (to_sec($rp1->{duration}) != to_sec($rp2->{duration}))
            || (to_sec($rp1->{shard_duration}) != to_sec($rp2->{shard_duration}))
            || ($rp1->{default} xor $rp2->{default});
}

# Continuous Queries -----------------------------------------------------------

sub extract_continuous_query_updates {
    my ($all_cqs_in_influxdb, $all_cqs_in_config, $dryrun, $force) = @_;

    my %dbs_union = map { $_ => 1 } (keys %$all_cqs_in_influxdb, keys %$all_cqs_in_config);
    my @dbs = keys %dbs_union;

    my @cq_deletions;
    my @cq_updates_and_creations;
    for my $db (sort @dbs) {
        my $in_influxdb = {};
        $in_influxdb = $all_cqs_in_influxdb->{$db} if exists $$all_cqs_in_influxdb{$db};
        my $in_config = {};
        $in_config = $all_cqs_in_config->{$db} if exists $$all_cqs_in_config{$db};

        my ($old, $eq, $new) = get_Ldifference_intersection_Rdifference([keys %$in_influxdb], [keys %$in_config]);

        for my $cq (sort @$old) {
            push @cq_deletions, {
                action => 'delete',
                object => 'cq',
                db => $db,
                name => $cq,
                query => "DROP CONTINUOUS QUERY $cq ON $db;",
                skip => $dryrun || !$force,
            };
        }
        for my $cq (sort @$eq) {
            if (compare_cqs($in_influxdb->{$cq}, $in_config->{$cq}) != 0) {
                push @cq_updates_and_creations, {
                    action => 'update',
                    object => 'cq',
                    db => $db,
                    name => $cq,
                    query => "DROP CONTINUOUS QUERY $cq ON $db; $all_cqs_in_config->{$db}->{$cq};",
                    skip => $dryrun,
                };
            }
        }
        for my $cq (sort @$new) {
            push @cq_updates_and_creations, {
                action => 'create',
                object => 'cq',
                db => $db,
                name => $cq,
                query => $all_cqs_in_config->{$db}->{$cq} . ';',
                skip => $dryrun,
            };
        }
    }

    @cq_deletions = reverse @cq_deletions;

    return (\@cq_deletions, \@cq_updates_and_creations);
}

sub compare_cqs {
    my ($cq1, $cq2) = @_;
    for my $cq ($cq1, $cq2) {
        $cq =~ s/ //g;
        $cq =~ s/;//g;
        $cq =~ s/"//g;
        $cq = lc $cq;
        $cq =~ s/fill\(null\)//g; # since fill(null) doesn't change anything, influx doesn't store it
    }
    return $cq1 cmp $cq2;
}


# Data -------------------------------------------------------------------------

# {
#     <db> => {
#         <rp> => {
#             duration => ...,
#             shard_duration => ...,
#             default => ...,
#         },
#         ...
#     }
# }
sub load_db_schemas_in_influxdb {
    my ($influxdb_client) = @_;

    my $query_result = query_influxql($influxdb_client, 'SHOW DATABASES');
    my $dbs_in_influxdb = $query_result->{'results'}->[0]->{series}->[0]->{values};
    my @dbs_in_influxdb = grep { $_ ne '_internal' }
                          map { $_->[0] }
                          @$dbs_in_influxdb;

    my %db_schemas_in_influxdb;
    for my $db (@dbs_in_influxdb) {
        my $rp_query_res = query_influxql($influxdb_client, "SHOW RETENTION POLICIES ON $db");
        $db_schemas_in_influxdb{$db} = {
            map  { $_->[0] => {
                    duration => $_->[1],
                    shard_duration => $_->[2],
                    default => $_->[4],
                }
            }
            @{$rp_query_res->{results}->[0]->{series}->[0]->{values}}
        };
    }

    return \%db_schemas_in_influxdb;
}


#
# Iterates over all files found in the schema directory. For each file it parses the statements and adds the valid ones in a hash data structure.
#
# Arguments:
#     $schema_dir string: the directory name where the config files are
#
# Returns:
#     a reference to a hash holding the parsed statements. This hash is structured as below.
#
# {
#     <db> => {
#         create_query => '...',
#         rps => {
#             <rp> => {
#                 duration => ...,
#                 shard_duration => ...,
#                 default => ...,
#             },
#             ...
#         },
#     },
#     ...
# }
#
sub load_db_schemas_in_config {
    my ($schema_dir) = @_;

    my %parsed_statements;
    my $db_files = get_schema_files_for_dir("$schema_dir/db");

    for my $db_file (@$db_files) {
        my $statements_in_file = read_text("$schema_dir/db/$db_file");
        parse_statements_add_to_hash($statements_in_file, \%parsed_statements);
    }
    return \%parsed_statements;
}


#
# Iterates over the lines of a config file, parses the valid statements and adds them to the given hash.
# Valid statements are:
#    - Create database with optional retention policy defined
#    - Create retention policy
#    - Delete retention policy
#
# Arguments:
#     $string_to_parse string: the contents of the config file (loaded as string)
#     $parsed_statements reference: a reference to a hash. The function will populate it with the parsed statements.
#
# Returns:
#     a reference to a hash holding the parsed statements to be executed on the database.
#
sub parse_statements_add_to_hash {
    my ($string_to_parse, $parsed_statements) = @_;

    # regex to capture a 'create database' statement with an optional retention policy definition
    my $db_regex = qr/^(create \s database \s (\w+))           # a create db statement starting at the beginning of the line. Any valid word as db name. Captured group.
		     (\s? with \s duration                     # optional statement to define a retention policy in the db creation statement
		      \s ((?:\d+[smhdw])|(?:inf)) \s [\w ]*?   # captured policy duration as one or more numbers followed by a letter, or 'inf'
		      \s shard \s duration \s "?(\d+[smhdw])"? # captured shard duration, as above
		      \s name \s "?([\w.]+)"? )?               # captured policy name as one or more word letters or dots, optionally enclosed in double quotes.
		     /xim;                                     # case insensitive, multiline (to make the anchors work)

    # regex to capture a retention policy definition statement
    my $rp_regex = qr/^create \s retention \s policy
		     \s "?([\w.]+)"?                          # any string containing word chars or '.', optionally enclosed in double quotes
		     \s on \s (\w+)
		     \s duration \s ((?:\d+[smhdw])|(?:inf))  # policy duration: either one or more numbers followed by a letter in the brackets, or 'inf'. Capture only the enclosing group.
		     \s replication \s 1 \s shard \s duration
		     \s "?(\d+[smhdw])"?                      # shard duration: one or more numbers followed by a letter in the brackets, optionally enclosed in double quotes
		     (\s default)?                            # default retention policy: optional 'default' value.
		     /xim;                                    # case insensitive, multiline (to make the anchors work)

    # regex to capture a retention policy deletion statement
    my $rp_delete_regex = qr/^drop retention policy "?([\w.]+)"? on "?(\w+)"?/im;

    # a line in the file can be a database creation or retention policy creation or retention policy deletion statement
    my $integrated_regex = qr/$db_regex|$rp_regex|$rp_delete_regex/;

    # parse each matching line in a loop
    # TODO: give a warning when a line doesn't match any expected regex
    while ($string_to_parse =~ /$integrated_regex/g) {
	# capture groups from the regex
	my $create_db_statement = $1;
	my $db_name = $2;
	my $inline_rp_statement = $3;
	my $inline_rp_duration = $4;
	my $inline_rp_shard_duration = $5;
	my $inline_rp_name = $6;
	my $rp_name = $7;
	my $rp_db_name = $8;
	my $rp_duration = $9;
	my $rp_shard_duration = $10;
	my $default_rp = $11 ? 1 : 0;
	my $rp_name_to_drop = $12;
	my $db_name_for_dropped_rp = $13;

	# the line contains a 'create database' definition
	if ($create_db_statement) {
	    add_db_create_statement($parsed_statements, $create_db_statement . ';', $db_name);
	    # there is a retention policy defined together with the db creation statement
	    if ($inline_rp_statement) {
		# flagged as the default policy
		add_rp_create_statement($parsed_statements, $db_name, $inline_rp_name, $inline_rp_duration, $inline_rp_shard_duration, 1);
	    }
	}
	# the line is a 'create retention policy' definition
	elsif ($rp_name) {
	    add_rp_create_statement($parsed_statements, $rp_db_name, $rp_name, $rp_duration, $rp_shard_duration, $default_rp);
	}
	elsif ($rp_name_to_drop) {
	    delete $parsed_statements->{$db_name_for_dropped_rp}->{'rps'}->{$rp_name_to_drop};
	}
	# the line is a valid statement (matches the regex), but we don't account for it in the above if statements. Should not happen.
	else {
	    die "Should never reach this point, fix it by implementing a conditional to cover this case."
	}
    }
    return $parsed_statements;
}


#
# Adds the passed 'create database' statement in the given hash holding the parsed statements, using the db name as the key.
# If the statement already exists in the hash it throws an error.
#
# Arguments:
#     $parsed_statements reference: hash holding the parsed statements. The function will add the db creation statement to this hash.
#     $create_statement string: the 'create database' statement to add
#     $db_name string: the name of the database to use as the key in the hash
#
# Returns:
#
sub add_db_create_statement {
    my ($parsed_statements, $create_statement, $db_name) = @_;

    # there should be no 'create database' statement yet for this database
    if (exists $parsed_statements->{$db_name}{create_query}) {
        die "Create statement already defined for database $db_name. Fix the config file";
    }

    $parsed_statements->{$db_name}{create_query} = $create_statement;
}


#
# Adds the passed 'create retention policy' statement in the given hash holding the parsed statements.
#
# Arguments:
#     $parsed_statements reference: reference to a hash
#     $db_name string: the name of the database to which the rp refers
#     $rp_name string:
#     $rp_duration string:
#     $rp_shard_duration string:
#     $rp_default boolean: whether this is the default policy
#
# Returns:
#
sub add_rp_create_statement {
    my ($parsed_statements, $db_name, $rp_name, $rp_duration, $rp_shard_duration, $rp_default) = @_;

    $parsed_statements->{$db_name}{rps}{$rp_name} = {duration       => $rp_duration,
	                                                   shard_duration => $rp_shard_duration,
                                                     default        => $rp_default};
}


# {
#     <db> => {
#         <cq_name> => <cq_create_query>,
#         ...
#     },
# }
sub load_all_cqs_in_influxdb {
    my ($influxdb_client) = @_;

    my %all_cqs_in_influxdb;
    my $cqs_query_res = query_influxql($influxdb_client, "SHOW CONTINUOUS QUERIES");
    %all_cqs_in_influxdb = map { $_->{name} => { map { $_->[0] => $_->[1] } @{$_->{values}} } }
                           @{$cqs_query_res->{results}->[0]->{series}};
    return \%all_cqs_in_influxdb;
}

# {
#     <db> => {
#         <cq_name> => <cq_create_query>,
#         ...
#     },
# }
sub load_all_cqs_in_config {
    my ($schema_dir) = @_;

    my %all_cqs_in_config;
    my $cq_files = get_schema_files_for_dir("$schema_dir/cq");
    for my $cq_file (@$cq_files) {
        my $cqs_in_file = parse_continuous_queries("$schema_dir/cq/$cq_file");
        %all_cqs_in_config = (%all_cqs_in_config, %$cqs_in_file);
    }
    return \%all_cqs_in_config;
}


sub get_schema_files_for_dir {
    my ($dir) = @_;
    my @files = grep { $_ }
                map  { /\/([\w.]+)$/; $1 }
                grep { -f }
                glob("$dir/*");
    return \@files;
}

# Parsers ----------------------------------------------------------------------

# parse CQs from something like:
# CREATE CONTINUOUS QUERY cq1 ON test RESAMPLE EVERY 5m FOR 10m BEGIN SELECT LAST(a) AS b, c INTO test.rp2.m FROM test.rp1.m GROUP BY time(5m) END;
# CREATE CONTINUOUS QUERY cq2 ON test RESAMPLE EVERY 5m FOR 10m BEGIN SELECT MAX(a) AS b, c INTO test.rp2.m FROM test.rp1.m GROUP BY time(5m) END;
sub parse_continuous_queries {
    my ($filename) = @_;

    my $file_content = read_text($filename);

    my %cqs;
    while ($file_content =~ /(create continuous query "?([\w.]+)"? on "?(\w+)"? [\s\S]+? end)/ig) { # some cq names contain '.'
        $cqs{$3}->{$2} = $1;
    }
    return \%cqs;
}


# Helpers ----------------------------------------------------------------------

# given two sets (arrays) of strings, returns the left difference, the intersection and the right difference
sub get_Ldifference_intersection_Rdifference {
    my ($l, $r) = @_;
    my @l = sort @{$l};
    my @r = sort @{$r};

    my @ldiff;
    my @inter;
    my @rdiff;
    while (@l || @r) {
        if (!@r) {
            push @ldiff, @l;
            last;
        }
        elsif (!@l) {
            push @rdiff, @r;
            last;
        }

        my $rel = $l[0] cmp $r[0];

        if ($rel < 0) {
            push @ldiff, shift @l;
        }
        elsif ($rel == 0) {
            push @inter, shift @l;
            shift @r;
        }
        else { # $rel > 0
            push @rdiff, shift @r;
        }
    }

    return (\@ldiff, \@inter, \@rdiff);
}

# convert InfluxDB duration string to seconds
sub to_sec {
    my ($d) = @_;

    # infinity is encoded as 0s in InfluxDB
    return 0 if $d eq 'INF';

    state $in_seconds = {
        'w' => 60 * 60 * 24 * 7,
        'd' => 60 * 60 * 24,
        'h' => 60 * 60,
        'm' => 60,
        's' => 1,
    };
    my $s;
    while ($d =~ /(\d+?)([smhdw])/g) {
        $s += $1 * $in_seconds->{$2};
    }

    return $s;
}

sub query_influxql {
    my ($influxdb_client, $ifql) = @_;
    my $query = $influxdb_client->query($ifql);
    die "The query \"$ifql\" failed.\n" if ! $query;
    my $data = $query->data();
    die "Error: \"$data->{results}->[0]->{error}\" when running InfluxQL query \"$ifql\"\n" if $data->{results}->[0]->{error};
    return $data;
}

# ------------------------------------------------------------------------------

main();

# ------------------------------------------------------------------------------

__END__

=head1 NAME

influxdb-schema-updater - Update InfluxDB databases, retention policies and continuous queries

=head1 VERSION

Version 0.01

=head1 SYNOPSIS

influxdb-schema-updater [--help] [--dryrun] [--diff] [--force] [--config <schema_location>] [--port <port>]

=head1 OPTIONS

=over 4

=item B<--help>

Print a help message and exit.

=item B<--dryrun>

Print the changes which would be applied in normal mode.

=item B<--diff>

Print the InfluxQL queries instead of executing them.

=item B<--force>

Apply the changes which were prevented in normal mode.

=item B<--config>

The directory where the schema files are located. Default is /etc/influxdb/schema/.

=item B<--url>

The url where the InfluxDB HTTP API is reachable. Default is localhost:8086.

=back

=head1 DESCRIPTION

B<This program> will read the config directory which should have the following
structure:

    db/
        # contains one or more InfluxQL create queries for a database and its RPs
        <db_file1>.ifql
        <db_file2>.ifql
        ...
    cq/
        # contains InfluxQL create queries for CQs
        <cq_file1>.ifql
        <cq_file2>.ifql
        ...

and compare the databases, retention policies (RPs) and continuous queries (CQs)
to the ones in the InfluxDB instance reachable at <url>. If there is a
difference, InfluxDB will be updated. The exit code is 0 if and only if no
update was skipped.

=cut
